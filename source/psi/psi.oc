#include <obliv.oh>
#include "psi.h"

void revealOblivIntArr(int* dest,size_t n,obliv int* src,int destParty)
{
  size_t i,p=ocCurrentParty();
  for(i=0;i<n;++i) revealOblivInt(dest+i,src[i],destParty);
}

// input ordered array from smaller to larger
// output the index of each array element in the final sorted array.
void psi(void* args)
{
  protocolIO *io = args;
  int v1Size = ocBroadcastInt(io->input.size, 1);
  int v2Size = ocBroadcastInt(io->input.size, 2);
  
  obliv int* v1 = malloc(sizeof(obliv int) * v1Size);
  obliv int* v2 = malloc(sizeof(obliv int) * v2Size);

  obliv int* r1 = malloc(sizeof(obliv int) * v1Size);
  obliv int* r2 = malloc(sizeof(obliv int) * v2Size);
  
  int vMinSize = v1Size<v2Size?v1Size:v2Size;
  feedOblivIntArray(v1, io->input.arr, v1Size, 1);
  feedOblivIntArray(v2, io->input.arr, v2Size, 2);

  for ( int i = 0; i < v1Size; i++) {
      for ( int j = 0; j < v2Size; j++) {
          obliv if (v1[i] == v2[i]){
            r2[j] = 1;
            r1[i] = 1;
          }
      }
  }
  
  revealOblivIntArray(io->output.arr, r1, v1Size, 1);
  revealOblivIntArray(io->output.arr, r2, v2Size, 2);
  //revealOblivIntArr(io->output.arr, v1Size, r1, 1);
  //revealOblivIntArr(io->output.arr, v2Size, r2, 2);

}
