#include <obliv.oh>
#include "psi.h"
#include <../common/util.h>


void revealOblivIntArr(int* dest,size_t n,obliv int* src,int destParty)
{
  size_t i,p=ocCurrentParty();
  for(i=0;i<n;++i) revealOblivInt(dest+i,src[i],destParty);
}

// input ordered array from smaller to larger
// output the index of each array element in the final sorted array.
void psi(void* args)
{
  protocolIO *io = args;
  int v1Size = ocBroadcastInt(io->input.size, 1);
  int v2Size = ocBroadcastInt(io->input.size, 2);
  
  obliv int* v1 = malloc(sizeof(obliv int) * v1Size);
  obliv int* v2 = malloc(sizeof(obliv int) * v2Size);

  obliv int* r1 = malloc(sizeof(obliv int) * v1Size);
  obliv int* r2 = malloc(sizeof(obliv int) * v2Size);
  for ( int i = 0; i < v1Size; i++ ){
    r1[i] = 0;
  }
  for ( int i = 0; i < v2Size; i++ ){
    r2[i] = 0;
  }
  
  feedOblivIntArray(v1, io->input.arr, v1Size, 1);
  feedOblivIntArray(v2, io->input.arr, v2Size, 2);
  int i = 0;
  int j = 0;

  fprintf(stderr,"starting gates\n");
  double lap2 = wallClock();
  while (i < v1Size && j < v2Size) {
    obliv bool lt = v1[i] < v2[j];
    bool lt_;
    revealOblivBool(&lt_, lt, 0);

    obliv bool gt = v1[i] > v2[j];
    bool gt_;
    revealOblivBool(&gt_, gt, 0);

    if ( lt_ ) {
      i+=1;
    }else if ( gt_ ) {
      j+=1;
    } else {
      r1[i] = 1;
      r2[j] = 1;
      i += 1;
      j += 1;
    }
  }
  fprintf(stderr,"Gates exec time: %lf s\n",wallClock()-lap2);
  
  revealOblivIntArray(io->output.arr, r1, v1Size, 1);
  revealOblivIntArray(io->output.arr, r2, v2Size, 2);
  //revealOblivIntArr(io->output.arr, v1Size, r1, 1);
  //revealOblivIntArr(io->output.arr, v2Size, r2, 2);
  fprintf(stderr,"YaoGateCount: %u\n",yaoGateCount());
}
