#include <obliv.oh>
#include "bsort.h"

// ------------------ Batcher sorting -----------------------------------------
void swapInt(obliv int* a,obliv int* b) obliv
{
  obliv int t = 0;
  t=*a^*b;
  *a^=t;
  *b^=t;
}

void cmpswapInt(obliv int* va,obliv int* vb)
{
  obliv int *a=va,*b=vb;
  obliv if(*a>*b) swapInt(a,b);
}

// TODO time with and without obliv functions. You can use non-obliv to build
//   obliv versions quite easily
void batcherSwap(obliv int* data,size_t n,size_t w)
{
  size_t i;
  for(i=0;i+1<n;i+=2) cmpswapInt(data+w*i,data+w*(i+1));
}

// void batcherSwap(unsigned char* data,size_t n,size_t w,
//                  void (*cmpswap)(void*,void*,void*),void* arg)
// {
//   size_t i;
//   for(i=0;i+1<n;i+=2) cmpswap(data+w*i,data+w*(i+1),arg);
// }

void batcherMerge(obliv int* data,size_t n1,size_t n2,size_t w)
{
  if(n1+n2<=1) return;
  int odd = n1%2;
  batcherMerge(data,(n1+1)/2,(n2+!odd)/2,w*2);
  batcherMerge(data+w,n1/2,  (n2+odd)/2,  w*2);
  batcherSwap(data+w*!odd,n1+n2-!odd,w);
}

// void batcherMerge(unsigned char* data,size_t n1,size_t n2,size_t w,
//                   void (*cmpswap)(void*,void*,void*),void* arg)
// {
//   if(n1+n2<=1) return;
//   int odd = n1%2;
//   batcherMerge(data,(n1+1)/2,(n2+!odd)/2,w*2,cmpswap,arg);
//   batcherMerge(data+w,n1/2,  (n2+odd)/2,  w*2,cmpswap,arg);
//   batcherSwap(data+w*!odd,n1+n2-!odd,w,cmpswap,arg);
// }

// w is width in bits
// batcher sort
void batcherSort(obliv int* data,size_t n,size_t w)
{
  if(n<=1) return;
  batcherSort(data,n/2,w);
  batcherSort(data+w*(n/2),(n+1)/2,w);
  batcherMerge(data,n/2,(n+1)/2,w);

}

void bsort(void* args)
{
  protocolIO *io = args;
  int v1Size = ocBroadcastInt(io->input.size, 1);
  int v2Size = ocBroadcastInt(io->input.size, 2);

  obliv int* arr = malloc(sizeof(obliv int)*(v1Size+v2Size));

  int vMinSize = v1Size<v2Size?v1Size:v2Size;
  feedOblivIntArray(arr, io->input.arr, v1Size, 1);
  feedOblivIntArray(arr+v1Size, io->input.arr, v2Size, 2);

  batcherSort(arr, v1Size+v2Size, 1);

  revealOblivIntArray(io->output.arr, arr, v1Size, 1);
  revealOblivIntArray(io->output.arr, arr+v1Size, v2Size, 2);
  fprintf(stderr,"YaoGateCount: %u\n",yaoGateCount());
}

